#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

function exit_status() {
  if [ $? = 0 ]; then
    echo -e '\001\033[01;32m\002✔'
  else 
    echo -e '\001\033[01;31m\002✘'
  fi
}

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
chroot_ps1=${debian_chroot:+($debian_chroot)}

function trim_whitespace() {
  local input="$1"
  local mode="${2:-}"

  if [[ "$mode" == "l" || "$mode" == "" ]]; then
    input="${input#"${input%%[![:space:]]*}"}"
  fi

  if [[ "$mode" == "r" || "$mode" == "" ]]; then
    input="${input%"${input##*[![:space:]]}"}"
  fi

  echo "$input"
}

# set colors for user host and working directory/path
BLUE=$(echo -e "\001\033[01;34m\002")
WHITE=$(echo -e "\001\033[00;37m\002")
CLEAR=$(echo -e "\001\033[00m\002")

function parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function color_git_branch() {
  branch="$(parse_git_branch)"
  if [ "$branch" = "(master)" ] || [ "$branch" = "(main)" ]; then
     echo -e " \001\033[07;31m\002${branch}\001\033[00m\002" # red
  elif [ "$branch" = "" ]; then
     echo -e ""
  else
    if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
      echo -e " \001\033[0;36m\002${branch}\001\033[00m\002" # cyan
    else
      echo -e " \001\033[0;32m\002${branch}\001\033[00m\002" # green
    fi
  fi
}

function get_venv_root() {
  local dir="$PWD"
  while [ "$dir" != "/" ]; do
    if [ -d "$dir/.venv" ]; then
      echo -e "$dir/.venv"
      return
    fi
    dir=$(dirname "$dir")
  done
}

function get_venv_name() {
  local venv_root=${1:-$(get_venv_root)}
  
  if [[ -z "${venv_root}" ]]; then
    echo -e ""
    return
  fi

  local venv_name=""
  local pyvenv_cfg="${venv_root}/pyvenv.cfg"
  
  if [[ -f "${pyvenv_cfg}" ]]; then
    venv_name=$(awk -F= '/^name=/ {print $2}' "${pyvenv_cfg}")
  fi

  if [[ -z "${venv_name}" && -f "${venv_root}/venv_name.txt" ]]; then
    venv_name=$(cat ${venv_root}/venv_name.txt)
  fi

  if [[ -z "${venv_name}" && -n "${venv_root}" ]]; then
    venv_name=$(basename ${venv_root})
  fi

  trim_whitespace "${venv_name}"
}

function parse_venv() {
  local venv_name="$(get_venv_name)"
  if [[ -n "$VIRTUAL_ENV" ]]; then
    local active_name="$(get_venv_name $VIRTUAL_ENV)"
    if [[ -n "${venv_name}" ]]; then
      if [[ "${active_name}" == "${venv_name}" ]]; then
        echo -e "($(get_venv_name))" # venv is active and correct
      else
        echo -e "!!$(get_venv_name $VIRTUAL_ENV) \u2260 $(get_venv_name)!!" # venv is active but incorrect
      fi
    else
      echo -e "-${active_name}-" # venv active but not in repo or parents
    fi
  elif [[ -n "${venv_name}" ]]; then
    if [[ -n "$(parse_git_branch)" ]]; then
      echo -e "*$(get_venv_name)*" # venv is in repo but inactive
    else
      echo -e "+$(get_venv_name)+" # venv is in parents but inactive
    fi
  fi
}

function color_git_venv() {
  local parsed_venv="$(parse_venv)"
  local venv_color=""
  if [[ -n ${parsed_venv} ]] ; then
    local venv_check="${parsed_venv:0:1}"
    if [[ "${venv_check}" == "(" ]] ; then
      venv_color="\001\033[01;32m\002" # venv is active and correct = green
    elif [[ "${venv_check}" == "!" ]] ; then
      venv_color="\001\033[01;31m\002" # venv is active but incorrect = red
    elif [[ "${venv_check}" == "-" ]] ; then
      venv_color="\001\033[01;36m\002" # active venv is not in repo or parents = cyan
    elif [[ "${venv_check}" == "*" || "${venv_check}" == "+" ]] ; then
      venv_color="\001\033[0;33m\002" # venv is inactive = yellow
    fi
    echo -e "${venv_color}${parsed_venv} \001\033[00m\002"
  fi
}

if [ "$color_prompt" = yes ]; then
  PS1=' $(exit_status) $(color_git_venv)${chroot_ps1}${BLUE}\u@\h${CLEAR}:${WHITE}\w${CLEAR}$(color_git_branch) \$ '
else
  PS1='$(parse_git_venv)${chroot_ps1}\u@\h:\w $(parse_git_branch) \$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac
